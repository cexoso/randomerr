{"version":3,"sources":["datarow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["randInt","fromIndex","toIndex","Math","floor","random","Row","props","countInput","useRef","qualifiedMinIput","qualifiedMaxIput","minInput","maxInput","qualifiedCountInput","useState","qpercent","setQpercent","randomResult","setRandomResult","getValue","ref","current","value","number","Number","isNaN","onChange","count","qualifiedMin","qualifiedMax","min","max","qcount","undefined","String","parseFloat","toFixed","array","less","i","push","qualify","getUnqRandom","r","arr","l","length","needCount","index","addMinus","tmp","targetIndex","shuffle","className","rowSpan","reduce","acc","key","all","DataRow","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d0037f4.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\n\nimport \"./datarow.css\";\n\nconst addMinus = (arr: { number: number }[]) => {\n  const l = arr.length;\n  const needCount = Math.floor(l * 0.2);\n  let i = 0;\n  while (i < needCount) {\n    const index = randInt(0, l - 1);\n    if (arr[index] && arr[index].number > 0) {\n      arr[index].number *= -1;\n      i++;\n    }\n  }\n};\n\nconst randInt = (fromIndex: number, toIndex: number) =>\n  Math.floor(Math.random() * (toIndex + 1 - fromIndex)) + fromIndex;\n\nconst shuffle = (arr: any[]) => {\n  const length = arr.length;\n  /******** 区别只有这两行 ********/\n  for (let i = 0; i < length; i++) {\n    const targetIndex = randInt(i, length - 1);\n    let tmp;\n    tmp = arr[i];\n    arr[i] = arr[targetIndex];\n    arr[targetIndex] = tmp;\n  }\n};\nconst Row: React.FC<{ r: number }> = (props) => {\n  const countInput = useRef<HTMLInputElement>(null);\n  const qualifiedMinIput = useRef<HTMLInputElement>(null);\n  const qualifiedMaxIput = useRef<HTMLInputElement>(null);\n  const minInput = useRef<HTMLInputElement>(null);\n  const maxInput = useRef<HTMLInputElement>(null);\n  const qualifiedCountInput = useRef<HTMLInputElement>(null);\n\n  const [qpercent, setQpercent] = useState(\"\");\n  const [randomResult, setRandomResult] = useState<\n    | {\n        qualify: boolean;\n        number: number;\n      }[]\n  >([]);\n\n  const getValue = (ref: React.RefObject<HTMLInputElement>) => {\n    if (ref.current && ref.current.value) {\n      const number = Number(ref.current.value);\n      if (!Number.isNaN(number)) {\n        return number;\n      }\n    }\n  };\n  const onChange = () => {\n    const count = getValue(countInput);\n    const qualifiedMin = getValue(qualifiedMinIput);\n    const qualifiedMax = getValue(qualifiedMaxIput);\n    const min = getValue(minInput);\n    const max = getValue(maxInput);\n    const qcount = getValue(qualifiedCountInput);\n    if (qcount === undefined || count === undefined) {\n      return;\n    }\n    if (qcount > count) {\n      setQpercent(\"\");\n      return;\n    }\n    if (count === 0) {\n      setQpercent(\"∞\");\n    } else {\n      const qp = (qcount / count) * 100;\n      setQpercent(String(parseFloat(qp.toFixed(5))) + \"%\");\n    }\n\n    let array = [];\n    if (\n      qualifiedMin === undefined ||\n      qualifiedMax === undefined ||\n      min === undefined ||\n      max === undefined\n    ) {\n      return;\n    }\n    if (max <= min) {\n      return;\n    }\n    if (qualifiedMax <= qualifiedMin) {\n      return;\n    }\n    if (max < qualifiedMax && min > qualifiedMin) {\n      return;\n    }\n    const less = count - qcount;\n    for (let i = 0; i < qcount; i++) {\n      array.push({\n        qualify: true,\n        number:\n          Math.floor(Math.random() * (qualifiedMax + 1 - qualifiedMin)) +\n          qualifiedMin,\n      });\n    }\n    const getUnqRandom: () => number = () => {\n      const r = Math.floor(Math.random() * (max + 1 - min)) + min;\n      if (r >= qualifiedMin && r <= qualifiedMax) {\n        return getUnqRandom();\n      }\n      return r;\n    };\n    for (let i = 0; i < less; i++) {\n      array.push({\n        qualify: false,\n        number: getUnqRandom(),\n      });\n    }\n    addMinus(array);\n    shuffle(array);\n    setRandomResult(array);\n  };\n\n  return (\n    <>\n      <tr className=\"title_row\">\n        <td rowSpan={2}>第{props.r}组</td>\n        <td>生成个数</td>\n        <td>合格标准</td>\n        <td>可超出范围</td>\n        <td>合格数个数</td>\n        <td>合格率(%)=合格个数/生成数个数</td>\n        <td>生成结果</td>\n      </tr>\n      <tr className=\"value_row\">\n        <td className=\"input_td\">\n          <input ref={countInput} className=\"input\" onChange={onChange} />\n        </td>\n        <td className=\"input_td\">\n          [\n          <input ref={qualifiedMinIput} className=\"input\" onChange={onChange} />\n          ,\n          <input ref={qualifiedMaxIput} className=\"input\" onChange={onChange} />\n          ]\n        </td>\n        <td className=\"input_td\">\n          [\n          <input ref={minInput} className=\"input\" onChange={onChange} />\n          ,\n          <input ref={maxInput} className=\"input\" onChange={onChange} />]\n        </td>\n        <td className=\"input_td\">\n          <input\n            ref={qualifiedCountInput}\n            className=\"input\"\n            onChange={onChange}\n          />\n        </td>\n        <td className=\"input_td\">{qpercent}</td>\n        <td className=\"input_td\">\n          {randomResult.reduce((acc, value, key, all) => {\n            acc.push(\n              <span\n                key={key}\n                className={value.qualify ? \"qualify\" : \"unqualify\"}\n              >\n                {value.number}\n              </span>\n            );\n            if (all[key + 1] !== undefined) {\n              acc.push(<span key={key + \"_,\"}>,</span>);\n            }\n            return acc;\n          }, [] as any)}\n        </td>\n      </tr>\n    </>\n  );\n};\nlet r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nexport const DataRow = () => {\n  return (\n    <table className=\"table\">\n      <tbody>\n        {r.map((value) => {\n          return <Row key={value} r={value} />;\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from \"react\";\nimport { DataRow } from \"./datarow\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <DataRow />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}