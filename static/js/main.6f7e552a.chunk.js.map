{"version":3,"sources":["datarow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toPercent","qp","String","parseFloat","toFixed","randInt","fromIndex","toIndex","Math","floor","random","Row","props","countInput","useRef","qualifiedMinIput","qualifiedMaxIput","minInput","maxInput","qualifiedCountInput","useState","qpercent","setQpercent","randomResult","setRandomResult","getValue","ref","current","value","number","Number","isNaN","onChange","count","qualifiedMin","qualifiedMax","min","max","qcount","undefined","onQPercent","array","less","i","push","qualify","getUnqRandom","r","arr","length","tmp","targetIndex","shuffle","className","rowSpan","reduce","acc","key","all","rr","map","index","DataRow","nums","filter","some","v","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f7e552a.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\n\nimport \"./datarow.css\";\n\nconst addMinus = (arr: { number: number }[]) => {\n  const l = arr.length;\n  const needCount = Math.floor(l * 0.2);\n  let i = 0;\n  while (i < needCount) {\n    const index = randInt(0, l - 1);\n    if (arr[index] && arr[index].number > 0) {\n      arr[index].number *= -1;\n      i++;\n    }\n  }\n};\nconst toPercent = (qp: number) => {\n  return String(parseFloat((qp * 100).toFixed(5))) + \"%\";\n};\nconst randInt = (fromIndex: number, toIndex: number) =>\n  Math.floor(Math.random() * (toIndex + 1 - fromIndex)) + fromIndex;\n\nconst shuffle = (arr: any[]) => {\n  const length = arr.length;\n  for (let i = 0; i < length; i++) {\n    const targetIndex = randInt(i, length - 1);\n    let tmp;\n    tmp = arr[i];\n    arr[i] = arr[targetIndex];\n    arr[targetIndex] = tmp;\n  }\n};\nconst Row: React.FC<{\n  r: number;\n  onQPercent: (qp: number | null | string) => void;\n}> = (props) => {\n  const countInput = useRef<HTMLInputElement>(null);\n  const qualifiedMinIput = useRef<HTMLInputElement>(null);\n  const qualifiedMaxIput = useRef<HTMLInputElement>(null);\n  const minInput = useRef<HTMLInputElement>(null);\n  const maxInput = useRef<HTMLInputElement>(null);\n  const qualifiedCountInput = useRef<HTMLInputElement>(null);\n\n  const [qpercent, setQpercent] = useState(\"\");\n  const [randomResult, setRandomResult] = useState<\n    | {\n        qualify: boolean;\n        number: number;\n      }[]\n  >([]);\n\n  const getValue = (ref: React.RefObject<HTMLInputElement>) => {\n    if (ref.current && ref.current.value) {\n      const number = Number(ref.current.value);\n      if (!Number.isNaN(number)) {\n        return number;\n      }\n    }\n  };\n  const onChange = () => {\n    const count = getValue(countInput);\n    const qualifiedMin = getValue(qualifiedMinIput);\n    const qualifiedMax = getValue(qualifiedMaxIput);\n    const min = getValue(minInput);\n    const max = getValue(maxInput);\n    const qcount = getValue(qualifiedCountInput);\n    if (qcount === undefined || count === undefined || qcount > count) {\n      setQpercent(\"\");\n      props.onQPercent(null);\n      return;\n    }\n    if (count === 0) {\n      setQpercent(\"∞\");\n      props.onQPercent(\"∞\");\n    } else {\n      const qp = qcount / count;\n      props.onQPercent(qp);\n      setQpercent(toPercent(qp));\n    }\n\n    let array = [];\n    if (\n      qualifiedMin === undefined ||\n      qualifiedMax === undefined ||\n      min === undefined ||\n      max === undefined\n    ) {\n      return;\n    }\n    if (max <= min) {\n      return;\n    }\n    if (qualifiedMax <= qualifiedMin) {\n      return;\n    }\n    if (max < qualifiedMax && min > qualifiedMin) {\n      return;\n    }\n    const less = count - qcount;\n    for (let i = 0; i < qcount; i++) {\n      array.push({\n        qualify: true,\n        number:\n          Math.floor(Math.random() * (qualifiedMax + 1 - qualifiedMin)) +\n          qualifiedMin,\n      });\n    }\n    const getUnqRandom: () => number = () => {\n      const r = Math.floor(Math.random() * (max + 1 - min)) + min;\n      if (r >= qualifiedMin && r <= qualifiedMax) {\n        return getUnqRandom();\n      }\n      return r;\n    };\n    for (let i = 0; i < less; i++) {\n      array.push({\n        qualify: false,\n        number: getUnqRandom(),\n      });\n    }\n    // addMinus(array);\n    shuffle(array);\n    setRandomResult(array);\n  };\n\n  return (\n    <>\n      <tr className=\"title_row\">\n        <td rowSpan={2}>第{props.r}组</td>\n        <td>生成个数</td>\n        <td>合格标准</td>\n        <td>可超出范围</td>\n        <td>合格数个数</td>\n        <td>合格率(%)=合格个数/生成数个数</td>\n        <td>生成结果</td>\n      </tr>\n      <tr className=\"value_row\">\n        <td className=\"input_td\">\n          <input ref={countInput} className=\"input\" onChange={onChange} />\n        </td>\n        <td className=\"input_td\">\n          [\n          <input ref={qualifiedMinIput} className=\"input\" onChange={onChange} />\n          ,\n          <input ref={qualifiedMaxIput} className=\"input\" onChange={onChange} />\n          ]\n        </td>\n        <td className=\"input_td\">\n          [\n          <input ref={minInput} className=\"input\" onChange={onChange} />\n          ,\n          <input ref={maxInput} className=\"input\" onChange={onChange} />]\n        </td>\n        <td className=\"input_td\">\n          <input\n            ref={qualifiedCountInput}\n            className=\"input\"\n            onChange={onChange}\n          />\n        </td>\n        <td className=\"input_td\">{qpercent}</td>\n        <td className=\"input_td\">\n          {randomResult.reduce((acc, value, key, all) => {\n            acc.push(\n              <span\n                key={key}\n                className={value.qualify ? \"qualify\" : \"unqualify\"}\n              >\n                {value.number}\n              </span>\n            );\n            if (all[key + 1] !== undefined) {\n              acc.push(<span key={key + \"_,\"}>,</span>);\n            }\n            return acc;\n          }, [] as any)}\n        </td>\n      </tr>\n    </>\n  );\n};\nlet r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst rr = r.map((value) => ({\n  index: value,\n  qpercent: null,\n}));\nexport const DataRow = () => {\n  const [qpercent, setQpercent] = useState<any[]>([]);\n  const nums = qpercent.filter((i) => typeof i === \"number\");\n  return (\n    <table className=\"table\">\n      <tbody>\n        {rr.map((value, index) => {\n          return (\n            <Row\n              key={value.index}\n              r={value.index}\n              onQPercent={(qp) => {\n                setQpercent((qpercent) => {\n                  qpercent[index] = qp;\n                  return [...qpercent];\n                });\n              }}\n            />\n          );\n        })}\n        <tr className=\"value_row\">\n          <td className=\"input_td\">平均合格率</td>\n          <td>\n            {qpercent.some((v) => v === \"∞\")\n              ? \"∞\"\n              : nums.length !== 0\n              ? toPercent(\n                  nums.reduce((acc, value) => acc + value, 0) / nums.length\n                )\n              : \"\"}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n","import React from \"react\";\nimport { DataRow } from \"./datarow\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <DataRow />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}